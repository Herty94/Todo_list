{"version":3,"sources":["components/ToDoItem.tsx","helpers/mockFunctions.ts","Constants/fileOfConstants.ts","components/List.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ToDoItem","item","useState","done","isDone","dNow","Date","d","date","hourNow","getHours","hour","Title","styled","h2","Note","p","DeadlineDate","Div","div","Container","title","note","replace","FetchPOST","url","data","fetch","method","headers","body","JSON","stringify","then","console","log","DeleteData","catch","err","message","URL","List","useForm","register","handleSubmit","reset","randomBytes","dataChange","setData","search","setSearch","filter","setFilter","input","setInput","loading","setLoadin","useEffect","res","ok","Error","json","useFetchGET","myConst","items","h1","RemoveButton","st","Button","DoneButton","BackButton","a","changeDone","id","className","ToggleButtonGroup","value","exclusive","onChange","event","newAlignment","color","ToggleButton","Input","type","placeholder","onKeyDown","searchText","key","target","map","time","onClick","handleDelete","String","onSubmit","handlePost","required","TextareaAutosize","maxRows","disableUnderline","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc2b7e9b.chunk.js","sourcesContent":["\r\nimport { Container } from \"@mui/material\";\r\nimport styled from \"styled-components\";\r\nimport { useState } from 'react';\r\n\r\n\r\nexport default function ToDoItem(item: any) {\r\n\r\n  const [isDone, setDone] = useState(item.done);\r\n  const dNow = new Date()\r\n  const d = new Date(item.date)\r\n\r\n  let hourNow = dNow.getHours()\r\n  let hour = d.getHours()\r\n\r\n  const Title = styled.h2`\r\n    text-align: left;\r\n    color: #d44d2f;\r\n    font-weight:700;\r\n  `;\r\n  const Note = styled.p`\r\n    text-align: left;\r\n    font-size: 1rem;\r\n    color: #8a8a8a;\r\n  `;\r\n  const DeadlineDate = styled.p`\r\n    color: ${hour - hourNow > 2 ? 'rgb(' + (hour - hourNow) % 255 + ', 100, 0) ' : '#ff7575'};\r\n    text-align: left;\r\n    font-size: 1rem;\r\n  `;\r\n\r\n\r\n  const Div = styled.div`\r\n    background-color: ${isDone ? '#dedede' : 'white'};\r\n    border-top-left-radius: 0.375rem;\r\n    border-bottom-left-radius  0.375rem;\r\n    padding-top: 1rem;\r\n    height:100%\r\n  `;\r\n\r\n  return (\r\n    <Div>\r\n      <Container>\r\n        <Title>{item.title}</Title>\r\n        <Note>{item.note}</Note>\r\n        <DeadlineDate>{item.date && (\"ddl: \" + item.date.replace('T', \" \"))}</DeadlineDate>\r\n      </Container>\r\n    </Div >\r\n  )\r\n}\r\n\r\nfunction useSate(arg0: boolean): [any, any] {\r\n  throw new Error(\"Function not implemented.\");\r\n}\r\n","import { useEffect, useState } from 'react'\r\n\r\nexport function useFetchGET(url: string, dataChange: any) {\r\n  const [data, setData] = useState([{}])\r\n  const [loading, setLoadin] = useState(true)\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then((res) => {\r\n        if (!res.ok) throw Error('Could not fetch the data')\r\n        return res.json()\r\n      })\r\n      .then((data) => {\r\n        setData(data)\r\n        console.log(data)\r\n        setLoadin(false)\r\n      })\r\n      .catch((err) => {\r\n        setLoadin(false)\r\n        console.log('ERROR' + err.message)\r\n      })\r\n  }, [dataChange])\r\n  return { data, loading }\r\n}\r\n\r\nexport function FetchPOST(url: string, data: any) {\r\n  return fetch(url, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(data),\r\n  }).then(() => {\r\n    console.log('new ToDo item created')\r\n  })\r\n}\r\nexport function FetchPUT(url: string, done: any) {\r\n  return fetch(url, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ done: done }),\r\n  }).then(() => {\r\n    console.log('ToDo item changed')\r\n  })\r\n}\r\n\r\nexport function DeleteData(url: string) {\r\n  return fetch(url, {\r\n    method: 'DELETE',\r\n  })\r\n    .then(() => {\r\n      console.log('ToDo item deleted')\r\n    })\r\n    .catch((err) => {\r\n      console.log(err.message)\r\n    })\r\n}\r\n","export const URL = 'https://61ae505ba7c7f3001786f792.mockapi.io/items'\r\n","\r\n\r\nimport { Button, ToggleButtonGroup, Input, ToggleButton } from \"@mui/material\";\r\nimport styled from \"styled-components\";\r\nimport ToDoItem from \"./ToDoItem\";\r\nimport { useFetchGET, FetchPOST } from \"../helpers/mockFunctions\";\r\nimport { TextareaAutosize } from \"@mui/core\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as myConst from '../Constants/fileOfConstants'\r\nimport { useState } from \"react\";\r\nimport { DeleteData } from \"../helpers/mockFunctions\";\r\nimport st from '@mui/material/styles/styled';\r\nimport { randomBytes } from \"crypto\";\r\n\r\nexport default function List() {\r\n    const { register, handleSubmit, reset } = useForm();\r\n    const [dataChange, setData] = useState(randomBytes(16));\r\n    const [search, setSearch] = useState('');\r\n    const [filter, setFilter] = useState('');\r\n    const [input, setInput] = useState(\"\");\r\n    // geting data from mockapi.io using custom hook\r\n    const { data: items, loading } = useFetchGET(filter === '' ?\r\n        myConst.URL + '?search=' + search\r\n        : myConst.URL + filter,\r\n        dataChange)\r\n    // posting data to mockapi.io\r\n    const onSubmit = (data: any) => {\r\n        data.done = false;\r\n        handlePost(myConst.URL, data)\r\n        reset();\r\n        console.log(data);\r\n        //window.location.reload();\r\n    }\r\n\r\n    //styled components\r\n    const Title = styled.h1`\r\n    font-size: 1.2em;\r\n    text-align: center;\r\n    color: palevioletred;\r\n    font-weight: 900;\r\n    `;\r\n\r\n    const RemoveButton = st(Button)`\r\n    color: #c70000;\r\n    background-color:#e38f8f ;\r\n    `;\r\n\r\n    const DoneButton = st(Button)`\r\n    background-color: lightgreen;\r\n    `;\r\n\r\n    const BackButton = st(Button)`\r\n    background-color: lightblue;\r\n    `;\r\n\r\n\r\n    // state handlers \r\n    //TODO could be inproved using Redux \r\n    const handleKeyDown = (event: any) => {\r\n        if (event.key === \"Enter\") {\r\n            handleSearch(event.target.value);\r\n        }\r\n    };\r\n    function handleSearch(searchText: string) {\r\n        setSearch(searchText);\r\n        setData(randomBytes(16));\r\n    }\r\n    const handleFilter = (\r\n        event: React.MouseEvent<HTMLElement>,\r\n        newAlignment: string | \"\",\r\n    ) => {\r\n        setFilter(newAlignment);\r\n        setData(randomBytes(16));\r\n    };\r\n\r\n    async function handlePost(url: string, data: any) {\r\n        await FetchPOST(url, data)\r\n        setData(randomBytes(16));\r\n    }\r\n    async function handleDelete(url: string, item: any) {\r\n        await DeleteData(url)\r\n        setData(randomBytes(16));\r\n    }\r\n    async function changeDone(url: string, id: number, item: any, done: boolean) {\r\n        await DeleteData(url + '/' + id)\r\n        item.done = done;\r\n        await FetchPOST(url, item)\r\n        setData(randomBytes(16));\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='bg-white object-contain rounded-2xl border-green-400 filter drop-shadow-lg'>\r\n            <div className='bg-red-100 rounded-t-xl'>\r\n                <Title>ToDo Zoznam</Title>\r\n            </div>\r\n            <div className='bg-white flex flex-row text-gray-400  items-center'>\r\n\r\n                <ToggleButtonGroup value={filter}\r\n                    exclusive onChange={handleFilter}\r\n                    color='primary'\r\n                    aria-label=\"filter items\">\r\n                    <ToggleButton value=\"\">All</ToggleButton>\r\n                    <ToggleButton value=\"?filter=true\">Done</ToggleButton>\r\n                    <ToggleButton value='?filter=false'>not Done</ToggleButton>\r\n                </ToggleButtonGroup>\r\n                <div className='flex-1 p-2 w-full'>\r\n                    {/* for some reason, styled components is refreshing this input after every single character tiped */}\r\n                    <Input type='search'\r\n\r\n                        placeholder='Search'\r\n                        onKeyDown={handleKeyDown}\r\n                        value={input}\r\n                        onChange={event => setInput(event.target.value)} />\r\n                </div>\r\n            </div >\r\n            <div className='bg-blue-200 object-contain px-4 border-green-400 overflow-y-scroll'>\r\n\r\n\r\n\r\n                {loading && <p>Loading data ...</p>}\r\n                {items && items.map((item: any) => {\r\n                    return (\r\n                        <div className='flex flex-row bg-white rounded-md my-4 filter drop-shadow-xl'>\r\n                            <div className='w-full'>\r\n                                <ToDoItem\r\n                                    title={item.title}\r\n                                    note={item.note}\r\n                                    date={item.date}\r\n                                    time={item.time}\r\n                                    done={item.done}\r\n                                    key={item.id} />\r\n                            </div>\r\n                            {/* TODO using redux buttons could be placed inside ToDoItem component */}\r\n                            <div className='flex flex-col bg-white rounded-md my-4 filter'>\r\n                                {item.done ?\r\n                                    <BackButton onClick={() => changeDone(myConst.URL, item.id, item, false)}>Back</BackButton>\r\n                                    : <DoneButton onClick={() => changeDone(myConst.URL, item.id, item, true)}>Hotovo</DoneButton>}\r\n                                <RemoveButton onClick={() => {\r\n                                    handleDelete(String(myConst.URL + '/' + item.id), item);\r\n                                }}>Zmazať</RemoveButton>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n                <p>Add new ToDo</p>\r\n            </div>\r\n            <div>\r\n                <form className='flex text-black rounded-b-xl m-2 flex-col bg-gray-300' onSubmit={handleSubmit(onSubmit)} >\r\n                    <Input {...register(\"title\", { required: true })}\r\n                        type='text'\r\n                        placeholder='Title'\r\n                    />\r\n                    <TextareaAutosize\r\n                        {...register(\"note\")}\r\n                        className='text-base'\r\n                        placeholder='write notes'\r\n                        maxRows={3} />\r\n                    <Input type='datetime-local' {...register(\"date\")} />\r\n                    <Input\r\n                        type='submit'\r\n                        value='Pridať'\r\n                        disableUnderline={true} />\r\n                </form>\r\n            </div>\r\n        </div >\r\n    )\r\n}","\r\nimport \"./App.css\";\r\n\r\nimport List from \"./components/List\";\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\r\n        <List />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}